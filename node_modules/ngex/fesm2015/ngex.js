import { InjectionToken, Injectable, Inject, NgModule, Optional, SkipSelf, defineInjectable, inject } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { BrowserModule } from '@angular/platform-browser';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const NgexServiceConfig = new InjectionToken('NgexStore');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class Ngex {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this.storex = {};
        this.actions = [];
        this.statepv = new BehaviorSubject(this.storex);
        this.store = this.statepv.asObservable();
        this.state = this.store.subscribe((state) => { this.state = state; });
        if (config) {
            this.createStore(config.store);
            this.createActions(config.actions);
        }
    }
    /**
     * @param {?} store
     * @return {?}
     */
    createStore(store) {
        this.storex = store;
        this.statepv.next(this.storex);
    }
    /**
     * @param {?} actions
     * @return {?}
     */
    createActions(actions) {
        this.actions = actions(this.storex);
        this.statepv.next(this.storex);
    }
    /**
     * @param {?} type
     * @param {?=} val
     * @return {?}
     */
    emit(type, val = null) {
        this.actions.find((a) => {
            if (a.type === type) {
                return a.action(val);
            }
        });
        this.statepv.next(this.storex);
    }
}
Ngex.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
Ngex.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NgexServiceConfig,] }] }
];
/** @nocollapse */ Ngex.ngInjectableDef = defineInjectable({ factory: function Ngex_Factory() { return new Ngex(inject(NgexServiceConfig)); }, token: Ngex, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgexModule {
    /**
     * @param {?} parentModule
     */
    constructor(parentModule) {
        if (parentModule) {
            throw new Error('NgexModule is already loaded. Import it in the AppModule only');
        }
    }
    /**
     * @param {?} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: NgexModule,
            providers: [
                Ngex, {
                    provide: NgexServiceConfig,
                    useValue: config
                }
            ]
        };
    }
}
NgexModule.decorators = [
    { type: NgModule, args: [{ imports: [BrowserModule], declarations: [], exports: [] },] }
];
/** @nocollapse */
NgexModule.ctorParameters = () => [
    { type: NgexModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { Ngex, NgexModule, NgexServiceConfig as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdleC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmdleC9saWIvbmdleC5jb25maWcudHMiLCJuZzovL25nZXgvbGliL25nZXguc2VydmljZS50cyIsIm5nOi8vbmdleC9saWIvbmdleC5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nZXhTdG9yZSB9IGZyb20gJy4vbmdleC5pbnRlcmZhY2UnO1xuIFxuZXhwb3J0IGNvbnN0IE5nZXhTZXJ2aWNlQ29uZmlnID0gbmV3IEluamVjdGlvblRva2VuPE5nZXhTdG9yZVtdPignTmdleFN0b3JlJyk7IiwiaW1wb3J0IHsgSW5qZWN0YWJsZSxPcHRpb25hbCxJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOZ2V4U2VydmljZUNvbmZpZyB9IGZyb20gJy4vbmdleC5jb25maWcnO1xuaW1wb3J0IHsgTmdleFN0b3JlIH0gZnJvbSAnLi9uZ2V4LmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKHtcbnByb3ZpZGVkSW46ICdyb290J1xufSlcblxuXG5leHBvcnQgY2xhc3MgTmdleCB7XG4gICAgcHJpdmF0ZSBzdG9yZXg6YW55ID0ge307XG4gICAgcHJpdmF0ZSBhY3Rpb25zOmFueSA9IFtdO1xuICAgIHByaXZhdGUgc3RhdGVwdjphbnkgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGFueT4odGhpcy5zdG9yZXgpO1xuICAgIHByaXZhdGUgc3RvcmU6YW55ID0gdGhpcy5zdGF0ZXB2LmFzT2JzZXJ2YWJsZSgpXG4gICAgcHVibGljIHN0YXRlOmFueSA9IHRoaXMuc3RvcmUuc3Vic2NyaWJlKChzdGF0ZTphbnkpID0+IHt0aGlzLnN0YXRlID0gc3RhdGV9KTsgICAgXG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KE5nZXhTZXJ2aWNlQ29uZmlnKSBwcml2YXRlIGNvbmZpZzogTmdleFN0b3JlKSB7XG4gICAgICAgIGlmIChjb25maWcpIHsgXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVN0b3JlKGNvbmZpZy5zdG9yZSk7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUFjdGlvbnMoY29uZmlnLmFjdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVN0b3JlKHN0b3JlOmFueSl7XG4gICAgICAgIHRoaXMuc3RvcmV4ID0gc3RvcmU7XG4gICAgICAgIHRoaXMuc3RhdGVwdi5uZXh0KHRoaXMuc3RvcmV4KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUFjdGlvbnMoYWN0aW9uczpGdW5jdGlvbil7XG4gICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnModGhpcy5zdG9yZXgpO1xuICAgICAgICB0aGlzLnN0YXRlcHYubmV4dCh0aGlzLnN0b3JleCk7XG4gICAgfVxuXG4gICAgcHVibGljIGVtaXQodHlwZTpzdHJpbmcsdmFsOmFueSA9IG51bGwpe1xuICAgICAgICB0aGlzLmFjdGlvbnMuZmluZCgoYTphbnkpID0+IHtcbiAgICAgICAgICAgIGlmKGEudHlwZSA9PT0gdHlwZSl7XG4gICAgICAgICAgICAgICByZXR1cm4gYS5hY3Rpb24odmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5zdGF0ZXB2Lm5leHQodGhpcy5zdG9yZXgpO1xuICAgIH1cbn0iLCJpbXBvcnQge05nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBPcHRpb25hbCwgU2tpcFNlbGZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCcm93c2VyTW9kdWxlfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7TmdleH0gZnJvbSAnLi9uZ2V4LnNlcnZpY2UnO1xuaW1wb3J0IHtOZ2V4U2VydmljZUNvbmZpZ30gZnJvbSAnLi9uZ2V4LmNvbmZpZydcbmltcG9ydCB7TmdleFN0b3JlfSBmcm9tICcuL25nZXguaW50ZXJmYWNlJztcblxuQE5nTW9kdWxlKHtpbXBvcnRzOiBbQnJvd3Nlck1vZHVsZV0sIGRlY2xhcmF0aW9uczogW10sIGV4cG9ydHM6IFtdfSlcblxuZXhwb3J0IGNsYXNzIE5nZXhNb2R1bGUge1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpQFNraXBTZWxmKClwYXJlbnRNb2R1bGUgOiBOZ2V4TW9kdWxlKSB7XG4gICAgaWYgKHBhcmVudE1vZHVsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOZ2V4TW9kdWxlIGlzIGFscmVhZHkgbG9hZGVkLiBJbXBvcnQgaXQgaW4gdGhlIEFwcE1vZHVsZSBvbmx5Jyk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGZvclJvb3QoY29uZmlnIDogTmdleFN0b3JlKSA6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmdleE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBOZ2V4LCB7XG4gICAgICAgICAgcHJvdmlkZTogTmdleFNlcnZpY2VDb25maWcsXG4gICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBR0EsTUFBYSxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FBYyxXQUFXLENBQUM7Ozs7OztBQ0g3RTs7OztJQWlCSSxZQUErQyxNQUFpQjtRQUFqQixXQUFNLEdBQU4sTUFBTSxDQUFXO3NCQU4zQyxFQUFFO3VCQUNELEVBQUU7dUJBQ0YsSUFBSSxlQUFlLENBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQztxQkFDdkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUU7cUJBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBUyxPQUFNLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBLEVBQUMsQ0FBQztRQUd4RSxJQUFJLE1BQU0sRUFBRTtZQUNSLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3RDO0tBQ0Y7Ozs7O0lBRUssV0FBVyxDQUFDLEtBQVM7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7Ozs7SUFHM0IsYUFBYSxDQUFDLE9BQWdCO1FBQ2xDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Ozs7Ozs7SUFHNUIsSUFBSSxDQUFDLElBQVcsRUFBQyxNQUFVLElBQUk7UUFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFLO1lBQ3BCLElBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUM7Z0JBQ2hCLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN2QjtTQUNKLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7OztZQW5DdEMsVUFBVSxTQUFDO2dCQUNaLFVBQVUsRUFBRSxNQUFNO2FBQ2pCOzs7OzRDQVVnQixNQUFNLFNBQUMsaUJBQWlCOzs7Ozs7OztBQ2pCekM7Ozs7SUFVRSxZQUFrQyxZQUF5QjtRQUN6RCxJQUFJLFlBQVksRUFBRTtZQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLCtEQUErRCxDQUFDLENBQUM7U0FDbEY7S0FDRjs7Ozs7SUFFRCxPQUFPLE9BQU8sQ0FBQyxNQUFrQjtRQUMvQixPQUFPO1lBQ0wsUUFBUSxFQUFFLFVBQVU7WUFDcEIsU0FBUyxFQUFFO2dCQUNULElBQUksRUFBRTtvQkFDSixPQUFPLEVBQUUsaUJBQWlCO29CQUMxQixRQUFRLEVBQUUsTUFBTTtpQkFDakI7YUFDRjtTQUNGLENBQUM7S0FDSDs7O1lBcEJGLFFBQVEsU0FBQyxFQUFDLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBQzs7OztZQUloQixVQUFVLHVCQUE5QyxRQUFRLFlBQUcsUUFBUTs7Ozs7Ozs7Ozs7Ozs7OyJ9