import { InjectionToken, Injectable, Inject, NgModule, Optional, SkipSelf, defineInjectable, inject } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { BrowserModule } from '@angular/platform-browser';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
const NgexServiceConfig = new InjectionToken('NgexStore');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class Ngex {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this.storex = {};
        this.actions = [];
        this.statepv = new BehaviorSubject(this.storex);
        this.store = this.statepv.asObservable();
        this.state = this.store.subscribe((state) => { this.state = state; });
        if (config) {
            this.createStore(config.store);
            this.createActions(config.actions);
        }
    }
    /**
     * @param {?} store
     * @return {?}
     */
    createStore(store) {
        this.storex = store;
        this.statepv.next(this.storex);
    }
    /**
     * @param {?} actions
     * @return {?}
     */
    createActions(actions) {
        this.actions = actions(this.storex);
        this.statepv.next(this.storex);
    }
    /**
     * @param {?} type
     * @param {?=} val
     * @return {?}
     */
    emit(type, val = null) {
        this.actions.find((a) => {
            if (a.type === type) {
                return a.action(val);
            }
        });
        this.statepv.next(this.storex);
    }
}
Ngex.ɵfac = function Ngex_Factory(t) { return new (t || Ngex)(ɵngcc0.ɵɵinject(NgexServiceConfig)); };
Ngex.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Ngex, factory: Ngex.ɵfac, providedIn: 'root' });
/** @nocollapse */
Ngex.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NgexServiceConfig,] }] }
];
/** @nocollapse */ Ngex.ngInjectableDef = defineInjectable({ factory: function Ngex_Factory() { return new Ngex(inject(NgexServiceConfig)); }, token: Ngex, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ngex, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [NgexServiceConfig]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgexModule {
    /**
     * @param {?} parentModule
     */
    constructor(parentModule) {
        if (parentModule) {
            throw new Error('NgexModule is already loaded. Import it in the AppModule only');
        }
    }
    /**
     * @param {?} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: NgexModule,
            providers: [
                Ngex, {
                    provide: NgexServiceConfig,
                    useValue: config
                }
            ]
        };
    }
}
NgexModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgexModule });
NgexModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgexModule_Factory(t) { return new (t || NgexModule)(ɵngcc0.ɵɵinject(NgexModule, 12)); }, imports: [[BrowserModule]] });
/** @nocollapse */
NgexModule.ctorParameters = () => [
    { type: NgexModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgexModule, { imports: function () { return [BrowserModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgexModule, [{
        type: NgModule,
        args: [{ imports: [BrowserModule], declarations: [], exports: [] }]
    }], function () { return [{ type: NgexModule, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { Ngex, NgexModule, NgexServiceConfig as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdleC5qcyIsInNvdXJjZXMiOlsibmc6L25nZXgvbGliL25nZXguY29uZmlnLnRzIiwibmc6L25nZXgvbGliL25nZXguc2VydmljZS50cyIsIm5nOi9uZ2V4L2xpYi9uZ2V4Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUdBLE1BQWEsaUJBQWlCLEdBQUcsSUFBSSxjQUFjLENBQWMsV0FBVyxDQUFDO0FBQUU7QUFBQztBQUFJO0FBQWtDO0FBQWtFO0FDSHhMO0FBQWE7QUFBUTtBQUF5QjtBQUFRLElBaUJsRCxZQUErQyxNQUFpQjtBQUNwRSxRQURtRCxXQUFNLEdBQU4sTUFBTSxDQUFXO0FBQUMsc0JBTjVDLEVBQUU7QUFDM0IsdUJBQTBCLEVBQUU7QUFDNUIsdUJBQTBCLElBQUksZUFBZSxDQUFNLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDL0QscUJBQXdCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO0FBQ2xELHFCQUFzQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQVMsT0FBTSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQSxFQUFDLENBQUM7QUFBRSxRQUcxRSxJQUFJLE1BQU0sRUFBRTtBQUFFLFlBQ1YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0MsWUFBWSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMvQyxTQUFTO0FBQ1QsS0FBTztBQUNQO0FBQ087QUFBd0I7QUFDakI7QUFBUSxJQURWLFdBQVcsQ0FBQyxLQUFTO0FBQ2hDLFFBQU8sSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDNUIsUUFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdkM7QUFDQTtBQUNPO0FBQTBCO0FBQzFCO0FBQVEsSUFESCxhQUFh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QUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBbkNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFVQSxBQUFBLEFBQUEsQUFBQSxBQ2pCQSxBQVVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFwQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nZXhTdG9yZSB9IGZyb20gJy4vbmdleC5pbnRlcmZhY2UnO1xuIFxuZXhwb3J0IGNvbnN0IE5nZXhTZXJ2aWNlQ29uZmlnID0gbmV3IEluamVjdGlvblRva2VuPE5nZXhTdG9yZVtdPignTmdleFN0b3JlJyk7IiwiaW1wb3J0IHsgSW5qZWN0YWJsZSxPcHRpb25hbCxJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOZ2V4U2VydmljZUNvbmZpZyB9IGZyb20gJy4vbmdleC5jb25maWcnO1xuaW1wb3J0IHsgTmdleFN0b3JlIH0gZnJvbSAnLi9uZ2V4LmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKHtcbnByb3ZpZGVkSW46ICdyb290J1xufSlcblxuXG5leHBvcnQgY2xhc3MgTmdleCB7XG4gICAgcHJpdmF0ZSBzdG9yZXg6YW55ID0ge307XG4gICAgcHJpdmF0ZSBhY3Rpb25zOmFueSA9IFtdO1xuICAgIHByaXZhdGUgc3RhdGVwdjphbnkgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGFueT4odGhpcy5zdG9yZXgpO1xuICAgIHByaXZhdGUgc3RvcmU6YW55ID0gdGhpcy5zdGF0ZXB2LmFzT2JzZXJ2YWJsZSgpXG4gICAgcHVibGljIHN0YXRlOmFueSA9IHRoaXMuc3RvcmUuc3Vic2NyaWJlKChzdGF0ZTphbnkpID0+IHt0aGlzLnN0YXRlID0gc3RhdGV9KTsgICAgXG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KE5nZXhTZXJ2aWNlQ29uZmlnKSBwcml2YXRlIGNvbmZpZzogTmdleFN0b3JlKSB7XG4gICAgICAgIGlmIChjb25maWcpIHsgXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVN0b3JlKGNvbmZpZy5zdG9yZSk7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUFjdGlvbnMoY29uZmlnLmFjdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVN0b3JlKHN0b3JlOmFueSl7XG4gICAgICAgIHRoaXMuc3RvcmV4ID0gc3RvcmU7XG4gICAgICAgIHRoaXMuc3RhdGVwdi5uZXh0KHRoaXMuc3RvcmV4KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUFjdGlvbnMoYWN0aW9uczpGdW5jdGlvbil7XG4gICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnModGhpcy5zdG9yZXgpO1xuICAgICAgICB0aGlzLnN0YXRlcHYubmV4dCh0aGlzLnN0b3JleCk7XG4gICAgfVxuXG4gICAgcHVibGljIGVtaXQodHlwZTpzdHJpbmcsdmFsOmFueSA9IG51bGwpe1xuICAgICAgICB0aGlzLmFjdGlvbnMuZmluZCgoYTphbnkpID0+IHtcbiAgICAgICAgICAgIGlmKGEudHlwZSA9PT0gdHlwZSl7XG4gICAgICAgICAgICAgICByZXR1cm4gYS5hY3Rpb24odmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5zdGF0ZXB2Lm5leHQodGhpcy5zdG9yZXgpO1xuICAgIH1cbn0iLCJpbXBvcnQge05nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBPcHRpb25hbCwgU2tpcFNlbGZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCcm93c2VyTW9kdWxlfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7TmdleH0gZnJvbSAnLi9uZ2V4LnNlcnZpY2UnO1xuaW1wb3J0IHtOZ2V4U2VydmljZUNvbmZpZ30gZnJvbSAnLi9uZ2V4LmNvbmZpZydcbmltcG9ydCB7TmdleFN0b3JlfSBmcm9tICcuL25nZXguaW50ZXJmYWNlJztcblxuQE5nTW9kdWxlKHtpbXBvcnRzOiBbQnJvd3Nlck1vZHVsZV0sIGRlY2xhcmF0aW9uczogW10sIGV4cG9ydHM6IFtdfSlcblxuZXhwb3J0IGNsYXNzIE5nZXhNb2R1bGUge1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpQFNraXBTZWxmKClwYXJlbnRNb2R1bGUgOiBOZ2V4TW9kdWxlKSB7XG4gICAgaWYgKHBhcmVudE1vZHVsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOZ2V4TW9kdWxlIGlzIGFscmVhZHkgbG9hZGVkLiBJbXBvcnQgaXQgaW4gdGhlIEFwcE1vZHVsZSBvbmx5Jyk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGZvclJvb3QoY29uZmlnIDogTmdleFN0b3JlKSA6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmdleE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBOZ2V4LCB7XG4gICAgICAgICAgcHJvdmlkZTogTmdleFNlcnZpY2VDb25maWcsXG4gICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufSJdfQ==