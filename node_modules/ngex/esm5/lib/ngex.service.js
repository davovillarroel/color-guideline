/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { NgexServiceConfig } from './ngex.config';
import * as i0 from "@angular/core";
import * as i1 from "./ngex.config";
var Ngex = /** @class */ (function () {
    function Ngex(config) {
        var _this = this;
        this.config = config;
        this.storex = {};
        this.actions = [];
        this.statepv = new BehaviorSubject(this.storex);
        this.store = this.statepv.asObservable();
        this.state = this.store.subscribe(function (state) { _this.state = state; });
        if (config) {
            this.createStore(config.store);
            this.createActions(config.actions);
        }
    }
    /**
     * @param {?} store
     * @return {?}
     */
    Ngex.prototype.createStore = /**
     * @param {?} store
     * @return {?}
     */
    function (store) {
        this.storex = store;
        this.statepv.next(this.storex);
    };
    /**
     * @param {?} actions
     * @return {?}
     */
    Ngex.prototype.createActions = /**
     * @param {?} actions
     * @return {?}
     */
    function (actions) {
        this.actions = actions(this.storex);
        this.statepv.next(this.storex);
    };
    /**
     * @param {?} type
     * @param {?=} val
     * @return {?}
     */
    Ngex.prototype.emit = /**
     * @param {?} type
     * @param {?=} val
     * @return {?}
     */
    function (type, val) {
        if (val === void 0) { val = null; }
        this.actions.find(function (a) {
            if (a.type === type) {
                return a.action(val);
            }
        });
        this.statepv.next(this.storex);
    };
    Ngex.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    Ngex.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NgexServiceConfig,] }] }
    ]; };
    /** @nocollapse */ Ngex.ngInjectableDef = i0.defineInjectable({ factory: function Ngex_Factory() { return new Ngex(i0.inject(i1.NgexServiceConfig)); }, token: Ngex, providedIn: "root" });
    return Ngex;
}());
export { Ngex };
if (false) {
    /** @type {?} */
    Ngex.prototype.storex;
    /** @type {?} */
    Ngex.prototype.actions;
    /** @type {?} */
    Ngex.prototype.statepv;
    /** @type {?} */
    Ngex.prototype.store;
    /** @type {?} */
    Ngex.prototype.state;
    /** @type {?} */
    Ngex.prototype.config;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdleC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmdleC8iLCJzb3VyY2VzIjpbImxpYi9uZ2V4LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBYSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0lBZTlDLGNBQStDLE1BQWlCO1FBQWhFLGlCQUtHO1FBTDRDLFdBQU0sR0FBTixNQUFNLENBQVc7c0JBTjNDLEVBQUU7dUJBQ0QsRUFBRTt1QkFDRixJQUFJLGVBQWUsQ0FBTSxJQUFJLENBQUMsTUFBTSxDQUFDO3FCQUN2QyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTtxQkFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBQyxLQUFTLElBQU0sS0FBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUEsRUFBQyxDQUFDO1FBR3hFLElBQUksTUFBTSxFQUFFO1lBQ1IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdEM7S0FDRjs7Ozs7SUFFSywwQkFBVzs7OztjQUFDLEtBQVM7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7Ozs7SUFHM0IsNEJBQWE7Ozs7Y0FBQyxPQUFnQjtRQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7Ozs7O0lBRzVCLG1CQUFJOzs7OztjQUFDLElBQVcsRUFBQyxHQUFjO1FBQWQsb0JBQUEsRUFBQSxVQUFjO1FBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBSztZQUNwQixJQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFDO2dCQUNoQixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdkI7U0FDSixDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7OztnQkFuQ3RDLFVBQVUsU0FBQztvQkFDWixVQUFVLEVBQUUsTUFBTTtpQkFDakI7Ozs7Z0RBVWdCLE1BQU0sU0FBQyxpQkFBaUI7OztlQWpCekM7O1NBVWEsSUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsT3B0aW9uYWwsSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmdleFNlcnZpY2VDb25maWcgfSBmcm9tICcuL25nZXguY29uZmlnJztcbmltcG9ydCB7IE5nZXhTdG9yZSB9IGZyb20gJy4vbmdleC5pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG5wcm92aWRlZEluOiAncm9vdCdcbn0pXG5cblxuZXhwb3J0IGNsYXNzIE5nZXgge1xuICAgIHByaXZhdGUgc3RvcmV4OmFueSA9IHt9O1xuICAgIHByaXZhdGUgYWN0aW9uczphbnkgPSBbXTtcbiAgICBwcml2YXRlIHN0YXRlcHY6YW55ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxhbnk+KHRoaXMuc3RvcmV4KTtcbiAgICBwcml2YXRlIHN0b3JlOmFueSA9IHRoaXMuc3RhdGVwdi5hc09ic2VydmFibGUoKVxuICAgIHB1YmxpYyBzdGF0ZTphbnkgPSB0aGlzLnN0b3JlLnN1YnNjcmliZSgoc3RhdGU6YW55KSA9PiB7dGhpcy5zdGF0ZSA9IHN0YXRlfSk7ICAgIFxuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChOZ2V4U2VydmljZUNvbmZpZykgcHJpdmF0ZSBjb25maWc6IE5nZXhTdG9yZSkge1xuICAgICAgICBpZiAoY29uZmlnKSB7IFxuICAgICAgICAgICAgdGhpcy5jcmVhdGVTdG9yZShjb25maWcuc3RvcmUpO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVBY3Rpb25zKGNvbmZpZy5hY3Rpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVTdG9yZShzdG9yZTphbnkpe1xuICAgICAgICB0aGlzLnN0b3JleCA9IHN0b3JlO1xuICAgICAgICB0aGlzLnN0YXRlcHYubmV4dCh0aGlzLnN0b3JleCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVBY3Rpb25zKGFjdGlvbnM6RnVuY3Rpb24pe1xuICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zKHRoaXMuc3RvcmV4KTtcbiAgICAgICAgdGhpcy5zdGF0ZXB2Lm5leHQodGhpcy5zdG9yZXgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBlbWl0KHR5cGU6c3RyaW5nLHZhbDphbnkgPSBudWxsKXtcbiAgICAgICAgdGhpcy5hY3Rpb25zLmZpbmQoKGE6YW55KSA9PiB7XG4gICAgICAgICAgICBpZihhLnR5cGUgPT09IHR5cGUpe1xuICAgICAgICAgICAgICAgcmV0dXJuIGEuYWN0aW9uKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMuc3RhdGVwdi5uZXh0KHRoaXMuc3RvcmV4KTtcbiAgICB9XG59Il19