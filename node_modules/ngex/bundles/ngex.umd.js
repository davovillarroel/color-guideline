(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('ngex', ['exports', '@angular/core', 'rxjs', '@angular/platform-browser'], factory) :
    (factory((global.ngex = {}),global.ng.core,global.rxjs,global.ng.platformBrowser));
}(this, (function (exports,i0,rxjs,platformBrowser) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NgexServiceConfig = new i0.InjectionToken('NgexStore');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Ngex = /** @class */ (function () {
        function Ngex(config) {
            var _this = this;
            this.config = config;
            this.storex = {};
            this.actions = [];
            this.statepv = new rxjs.BehaviorSubject(this.storex);
            this.store = this.statepv.asObservable();
            this.state = this.store.subscribe(function (state) { _this.state = state; });
            if (config) {
                this.createStore(config.store);
                this.createActions(config.actions);
            }
        }
        /**
         * @param {?} store
         * @return {?}
         */
        Ngex.prototype.createStore = /**
         * @param {?} store
         * @return {?}
         */
            function (store) {
                this.storex = store;
                this.statepv.next(this.storex);
            };
        /**
         * @param {?} actions
         * @return {?}
         */
        Ngex.prototype.createActions = /**
         * @param {?} actions
         * @return {?}
         */
            function (actions) {
                this.actions = actions(this.storex);
                this.statepv.next(this.storex);
            };
        /**
         * @param {?} type
         * @param {?=} val
         * @return {?}
         */
        Ngex.prototype.emit = /**
         * @param {?} type
         * @param {?=} val
         * @return {?}
         */
            function (type, val) {
                if (val === void 0) {
                    val = null;
                }
                this.actions.find(function (a) {
                    if (a.type === type) {
                        return a.action(val);
                    }
                });
                this.statepv.next(this.storex);
            };
        Ngex.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        Ngex.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Inject, args: [NgexServiceConfig,] }] }
            ];
        };
        /** @nocollapse */ Ngex.ngInjectableDef = i0.defineInjectable({ factory: function Ngex_Factory() { return new Ngex(i0.inject(NgexServiceConfig)); }, token: Ngex, providedIn: "root" });
        return Ngex;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgexModule = /** @class */ (function () {
        function NgexModule(parentModule) {
            if (parentModule) {
                throw new Error('NgexModule is already loaded. Import it in the AppModule only');
            }
        }
        /**
         * @param {?} config
         * @return {?}
         */
        NgexModule.forRoot = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return {
                    ngModule: NgexModule,
                    providers: [
                        Ngex, {
                            provide: NgexServiceConfig,
                            useValue: config
                        }
                    ]
                };
            };
        NgexModule.decorators = [
            { type: i0.NgModule, args: [{ imports: [platformBrowser.BrowserModule], declarations: [], exports: [] },] }
        ];
        /** @nocollapse */
        NgexModule.ctorParameters = function () {
            return [
                { type: NgexModule, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return NgexModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.Ngex = Ngex;
    exports.NgexModule = NgexModule;
    exports.Éµa = NgexServiceConfig;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdleC51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL25nZXgvbGliL25nZXguY29uZmlnLnRzIiwibmc6Ly9uZ2V4L2xpYi9uZ2V4LnNlcnZpY2UudHMiLCJuZzovL25nZXgvbGliL25nZXgubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ2V4U3RvcmUgfSBmcm9tICcuL25nZXguaW50ZXJmYWNlJztcbiBcbmV4cG9ydCBjb25zdCBOZ2V4U2VydmljZUNvbmZpZyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxOZ2V4U3RvcmVbXT4oJ05nZXhTdG9yZScpOyIsImltcG9ydCB7IEluamVjdGFibGUsT3B0aW9uYWwsSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmdleFNlcnZpY2VDb25maWcgfSBmcm9tICcuL25nZXguY29uZmlnJztcbmltcG9ydCB7IE5nZXhTdG9yZSB9IGZyb20gJy4vbmdleC5pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG5wcm92aWRlZEluOiAncm9vdCdcbn0pXG5cblxuZXhwb3J0IGNsYXNzIE5nZXgge1xuICAgIHByaXZhdGUgc3RvcmV4OmFueSA9IHt9O1xuICAgIHByaXZhdGUgYWN0aW9uczphbnkgPSBbXTtcbiAgICBwcml2YXRlIHN0YXRlcHY6YW55ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxhbnk+KHRoaXMuc3RvcmV4KTtcbiAgICBwcml2YXRlIHN0b3JlOmFueSA9IHRoaXMuc3RhdGVwdi5hc09ic2VydmFibGUoKVxuICAgIHB1YmxpYyBzdGF0ZTphbnkgPSB0aGlzLnN0b3JlLnN1YnNjcmliZSgoc3RhdGU6YW55KSA9PiB7dGhpcy5zdGF0ZSA9IHN0YXRlfSk7ICAgIFxuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChOZ2V4U2VydmljZUNvbmZpZykgcHJpdmF0ZSBjb25maWc6IE5nZXhTdG9yZSkge1xuICAgICAgICBpZiAoY29uZmlnKSB7IFxuICAgICAgICAgICAgdGhpcy5jcmVhdGVTdG9yZShjb25maWcuc3RvcmUpO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVBY3Rpb25zKGNvbmZpZy5hY3Rpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVTdG9yZShzdG9yZTphbnkpe1xuICAgICAgICB0aGlzLnN0b3JleCA9IHN0b3JlO1xuICAgICAgICB0aGlzLnN0YXRlcHYubmV4dCh0aGlzLnN0b3JleCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVBY3Rpb25zKGFjdGlvbnM6RnVuY3Rpb24pe1xuICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zKHRoaXMuc3RvcmV4KTtcbiAgICAgICAgdGhpcy5zdGF0ZXB2Lm5leHQodGhpcy5zdG9yZXgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBlbWl0KHR5cGU6c3RyaW5nLHZhbDphbnkgPSBudWxsKXtcbiAgICAgICAgdGhpcy5hY3Rpb25zLmZpbmQoKGE6YW55KSA9PiB7XG4gICAgICAgICAgICBpZihhLnR5cGUgPT09IHR5cGUpe1xuICAgICAgICAgICAgICAgcmV0dXJuIGEuYWN0aW9uKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMuc3RhdGVwdi5uZXh0KHRoaXMuc3RvcmV4KTtcbiAgICB9XG59IiwiaW1wb3J0IHtOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgT3B0aW9uYWwsIFNraXBTZWxmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QnJvd3Nlck1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQge05nZXh9IGZyb20gJy4vbmdleC5zZXJ2aWNlJztcbmltcG9ydCB7TmdleFNlcnZpY2VDb25maWd9IGZyb20gJy4vbmdleC5jb25maWcnXG5pbXBvcnQge05nZXhTdG9yZX0gZnJvbSAnLi9uZ2V4LmludGVyZmFjZSc7XG5cbkBOZ01vZHVsZSh7aW1wb3J0czogW0Jyb3dzZXJNb2R1bGVdLCBkZWNsYXJhdGlvbnM6IFtdLCBleHBvcnRzOiBbXX0pXG5cbmV4cG9ydCBjbGFzcyBOZ2V4TW9kdWxlIHtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKUBTa2lwU2VsZigpcGFyZW50TW9kdWxlIDogTmdleE1vZHVsZSkge1xuICAgIGlmIChwYXJlbnRNb2R1bGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTmdleE1vZHVsZSBpcyBhbHJlYWR5IGxvYWRlZC4gSW1wb3J0IGl0IGluIHRoZSBBcHBNb2R1bGUgb25seScpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBmb3JSb290KGNvbmZpZyA6IE5nZXhTdG9yZSkgOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5nZXhNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgTmdleCwge1xuICAgICAgICAgIHByb3ZpZGU6IE5nZXhTZXJ2aWNlQ29uZmlnLFxuICAgICAgICAgIHVzZVZhbHVlOiBjb25maWdcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn0iXSwibmFtZXMiOlsiSW5qZWN0aW9uVG9rZW4iLCJCZWhhdmlvclN1YmplY3QiLCJJbmplY3RhYmxlIiwiSW5qZWN0IiwiTmdNb2R1bGUiLCJCcm93c2VyTW9kdWxlIiwiT3B0aW9uYWwiLCJTa2lwU2VsZiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBR0EsUUFBYSxpQkFBaUIsR0FBRyxJQUFJQSxpQkFBYyxDQUFjLFdBQVcsQ0FBQzs7Ozs7O0FDSDdFO1FBaUJJLGNBQStDLE1BQWlCO1lBQWhFLGlCQUtHO1lBTDRDLFdBQU0sR0FBTixNQUFNLENBQVc7MEJBTjNDLEVBQUU7MkJBQ0QsRUFBRTsyQkFDRixJQUFJQyxvQkFBZSxDQUFNLElBQUksQ0FBQyxNQUFNLENBQUM7eUJBQ3ZDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO3lCQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFDLEtBQVMsSUFBTSxLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQSxFQUFDLENBQUM7WUFHeEUsSUFBSSxNQUFNLEVBQUU7Z0JBQ1IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQy9CLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3RDO1NBQ0Y7Ozs7O1FBRUssMEJBQVc7Ozs7c0JBQUMsS0FBUztnQkFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7Ozs7O1FBRzNCLDRCQUFhOzs7O3NCQUFDLE9BQWdCO2dCQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3BDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7Ozs7OztRQUc1QixtQkFBSTs7Ozs7c0JBQUMsSUFBVyxFQUFDLEdBQWM7Z0JBQWQsb0JBQUE7b0JBQUEsVUFBYzs7Z0JBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBSztvQkFDcEIsSUFBRyxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksRUFBQzt3QkFDaEIsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUN2QjtpQkFDSixDQUFDLENBQUE7Z0JBQ0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7b0JBbkN0Q0MsYUFBVSxTQUFDO3dCQUNaLFVBQVUsRUFBRSxNQUFNO3FCQUNqQjs7Ozs7d0RBVWdCQyxTQUFNLFNBQUMsaUJBQWlCOzs7O21CQWpCekM7Ozs7Ozs7QUNBQTtRQVVFLG9CQUFrQyxZQUF5QjtZQUN6RCxJQUFJLFlBQVksRUFBRTtnQkFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQywrREFBK0QsQ0FBQyxDQUFDO2FBQ2xGO1NBQ0Y7Ozs7O1FBRU0sa0JBQU87Ozs7WUFBZCxVQUFlLE1BQWtCO2dCQUMvQixPQUFPO29CQUNMLFFBQVEsRUFBRSxVQUFVO29CQUNwQixTQUFTLEVBQUU7d0JBQ1QsSUFBSSxFQUFFOzRCQUNKLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFFBQVEsRUFBRSxNQUFNO3lCQUNqQjtxQkFDRjtpQkFDRixDQUFDO2FBQ0g7O29CQXBCRkMsV0FBUSxTQUFDLEVBQUMsT0FBTyxFQUFFLENBQUNDLDZCQUFhLENBQUMsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUM7Ozs7O3dCQUloQixVQUFVLHVCQUE5Q0MsV0FBUSxZQUFHQyxXQUFROzs7eUJBVmxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9