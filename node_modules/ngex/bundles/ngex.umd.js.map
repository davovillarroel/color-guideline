{"version":3,"file":"ngex.umd.js.map","sources":["ng://ngex/lib/ngex.config.ts","ng://ngex/lib/ngex.service.ts","ng://ngex/lib/ngex.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { NgexStore } from './ngex.interface';\n \nexport const NgexServiceConfig = new InjectionToken<NgexStore[]>('NgexStore');","import { Injectable,Optional,Inject } from '@angular/core';\nimport { Observable,BehaviorSubject } from 'rxjs';\nimport { NgexServiceConfig } from './ngex.config';\nimport { NgexStore } from './ngex.interface';\n\n@Injectable({\nprovidedIn: 'root'\n})\n\n\nexport class Ngex {\n    private storex:any = {};\n    private actions:any = [];\n    private statepv:any = new BehaviorSubject<any>(this.storex);\n    private store:any = this.statepv.asObservable()\n    public state:any = this.store.subscribe((state:any) => {this.state = state});    \n\n    constructor(@Inject(NgexServiceConfig) private config: NgexStore) {\n        if (config) { \n            this.createStore(config.store);\n            this.createActions(config.actions);\n        }\n      }\n\n    private createStore(store:any){\n        this.storex = store;\n        this.statepv.next(this.storex);\n    }\n\n    private createActions(actions:Function){\n        this.actions = actions(this.storex);\n        this.statepv.next(this.storex);\n    }\n\n    public emit(type:string,val:any = null){\n        this.actions.find((a:any) => {\n            if(a.type === type){\n               return a.action(val);\n            }\n        })\n        this.statepv.next(this.storex);\n    }\n}","import {NgModule, ModuleWithProviders, Optional, SkipSelf} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {Ngex} from './ngex.service';\nimport {NgexServiceConfig} from './ngex.config'\nimport {NgexStore} from './ngex.interface';\n\n@NgModule({imports: [BrowserModule], declarations: [], exports: []})\n\nexport class NgexModule {\n\n  constructor(@Optional()@SkipSelf()parentModule : NgexModule) {\n    if (parentModule) {\n      throw new Error('NgexModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  static forRoot(config : NgexStore) : ModuleWithProviders {\n    return {\n      ngModule: NgexModule,\n      providers: [\n        Ngex, {\n          provide: NgexServiceConfig,\n          useValue: config\n        }\n      ]\n    };\n  }\n}"],"names":["InjectionToken","BehaviorSubject","Injectable","Inject","NgModule","BrowserModule","Optional","SkipSelf"],"mappings":";;;;;;;;;;AAAA;AAGA,QAAa,iBAAiB,GAAG,IAAIA,iBAAc,CAAc,WAAW,CAAC;;;;;;ACH7E;QAiBI,cAA+C,MAAiB;YAAhE,iBAKG;YAL4C,WAAM,GAAN,MAAM,CAAW;0BAN3C,EAAE;2BACD,EAAE;2BACF,IAAIC,oBAAe,CAAM,IAAI,CAAC,MAAM,CAAC;yBACvC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;yBAC5B,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,UAAC,KAAS,IAAM,KAAI,CAAC,KAAK,GAAG,KAAK,CAAA,EAAC,CAAC;YAGxE,IAAI,MAAM,EAAE;gBACR,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC/B,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aACtC;SACF;;;;;QAEK,0BAAW;;;;sBAAC,KAAS;gBACzB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;gBACpB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;;;;;QAG3B,4BAAa;;;;sBAAC,OAAgB;gBAClC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACpC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;;;;;;QAG5B,mBAAI;;;;;sBAAC,IAAW,EAAC,GAAc;gBAAd,oBAAA;oBAAA,UAAc;;gBAClC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAC,CAAK;oBACpB,IAAG,CAAC,CAAC,IAAI,KAAK,IAAI,EAAC;wBAChB,OAAO,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACvB;iBACJ,CAAC,CAAA;gBACF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;;oBAnCtCC,aAAU,SAAC;wBACZ,UAAU,EAAE,MAAM;qBACjB;;;;;wDAUgBC,SAAM,SAAC,iBAAiB;;;;mBAjBzC;;;;;;;ACAA;QAUE,oBAAkC,YAAyB;YACzD,IAAI,YAAY,EAAE;gBAChB,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;aAClF;SACF;;;;;QAEM,kBAAO;;;;YAAd,UAAe,MAAkB;gBAC/B,OAAO;oBACL,QAAQ,EAAE,UAAU;oBACpB,SAAS,EAAE;wBACT,IAAI,EAAE;4BACJ,OAAO,EAAE,iBAAiB;4BAC1B,QAAQ,EAAE,MAAM;yBACjB;qBACF;iBACF,CAAC;aACH;;oBApBFC,WAAQ,SAAC,EAAC,OAAO,EAAE,CAACC,6BAAa,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAC;;;;;wBAIhB,UAAU,uBAA9CC,WAAQ,YAAGC,WAAQ;;;yBAVlC;;;;;;;;;;;;;;;;;;;;;;;;;"}
