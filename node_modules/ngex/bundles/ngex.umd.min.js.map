{"version":3,"sources":["ng://ngex/lib/ngex.config.ts","ng://ngex/lib/ngex.service.ts","ng://ngex/lib/ngex.module.ts"],"names":["NgexServiceConfig","InjectionToken","Ngex","config","_this","this","BehaviorSubject","storex","statepv","asObservable","store","subscribe","state","createStore","createActions","actions","prototype","next","emit","type","val","find","a","action","Injectable","args","providedIn","Inject","NgexModule","parentModule","Error","forRoot","ngModule","providers","provide","useValue","NgModule","imports","BrowserModule","declarations","exports","decorators","Optional","SkipSelf"],"mappings":"2WAGA,IAAaA,EAAoB,IAAIC,EAAAA,eAA4B,aCHjEC,EAAA,WAiBI,SAAAA,EAA+CC,GAA/C,IAAAC,EAAAC,KAA+CA,KAAAF,OAAAA,cAN1B,gBACC,gBACA,IAAIG,EAAAA,gBAAqBD,KAAKE,mBAChCF,KAAKG,QAAQC,0BACdJ,KAAKK,MAAMC,UAAU,SAACC,GAAeR,EAAKQ,MAAQA,IAG7DT,IACAE,KAAKQ,YAAYV,EAAOO,OACxBL,KAAKS,cAAcX,EAAOY,iBAI1Bb,EAAAc,UAAAH,qBAAYH,GAChBL,KAAKE,OAASG,EACdL,KAAKG,QAAQS,KAAKZ,KAAKE,SAGnBL,EAAAc,UAAAF,uBAAcC,GAClBV,KAAKU,QAAUA,EAAQV,KAAKE,QAC5BF,KAAKG,QAAQS,KAAKZ,KAAKE,SAGpBL,EAAAc,UAAAE,cAAKC,EAAYC,QAAA,IAAAA,IAAAA,EAAA,MACpBf,KAAKU,QAAQM,KAAK,SAACC,GACf,GAAGA,EAAEH,OAASA,EACX,OAAOG,EAAEC,OAAOH,KAGvBf,KAAKG,QAAQS,KAAKZ,KAAKE,6BAnC9BiB,EAAAA,WAAUC,KAAA,CAAC,CACZC,WAAY,gFAWKC,EAAAA,OAAMF,KAAA,CAACzB,0HAjBxB,GCAA4B,EAAA,WAUE,SAAAA,EAAkCC,GAChC,GAAIA,EACF,MAAM,IAAIC,MAAM,wEAIbF,EAAAG,QAAP,SAAe5B,GACb,MAAO,CACL6B,SAAUJ,EACVK,UAAW,CACT/B,EAAM,CACJgC,QAASlC,EACTmC,SAAUhC,0BAhBnBiC,EAAAA,SAAQX,KAAA,CAAC,CAACY,QAAS,CAACC,EAAAA,eAAgBC,aAAc,GAAIC,QAAS,gDAIbZ,EAAUa,WAAA,CAAA,CAAAtB,KAA9CuB,EAAAA,UAAQ,CAAAvB,KAAGwB,EAAAA,gBAV1B","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { NgexStore } from './ngex.interface';\n \nexport const NgexServiceConfig = new InjectionToken<NgexStore[]>('NgexStore');","import { Injectable,Optional,Inject } from '@angular/core';\nimport { Observable,BehaviorSubject } from 'rxjs';\nimport { NgexServiceConfig } from './ngex.config';\nimport { NgexStore } from './ngex.interface';\n\n@Injectable({\nprovidedIn: 'root'\n})\n\n\nexport class Ngex {\n    private storex:any = {};\n    private actions:any = [];\n    private statepv:any = new BehaviorSubject<any>(this.storex);\n    private store:any = this.statepv.asObservable()\n    public state:any = this.store.subscribe((state:any) => {this.state = state});    \n\n    constructor(@Inject(NgexServiceConfig) private config: NgexStore) {\n        if (config) { \n            this.createStore(config.store);\n            this.createActions(config.actions);\n        }\n      }\n\n    private createStore(store:any){\n        this.storex = store;\n        this.statepv.next(this.storex);\n    }\n\n    private createActions(actions:Function){\n        this.actions = actions(this.storex);\n        this.statepv.next(this.storex);\n    }\n\n    public emit(type:string,val:any = null){\n        this.actions.find((a:any) => {\n            if(a.type === type){\n               return a.action(val);\n            }\n        })\n        this.statepv.next(this.storex);\n    }\n}","import {NgModule, ModuleWithProviders, Optional, SkipSelf} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {Ngex} from './ngex.service';\nimport {NgexServiceConfig} from './ngex.config'\nimport {NgexStore} from './ngex.interface';\n\n@NgModule({imports: [BrowserModule], declarations: [], exports: []})\n\nexport class NgexModule {\n\n  constructor(@Optional()@SkipSelf()parentModule : NgexModule) {\n    if (parentModule) {\n      throw new Error('NgexModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  static forRoot(config : NgexStore) : ModuleWithProviders {\n    return {\n      ngModule: NgexModule,\n      providers: [\n        Ngex, {\n          provide: NgexServiceConfig,\n          useValue: config\n        }\n      ]\n    };\n  }\n}"]}